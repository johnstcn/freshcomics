// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/johnstcn/freshcomics/internal/store (interfaces: Store)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	store "github.com/johnstcn/freshcomics/internal/store"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCrawlInfo mocks base method.
func (m *MockStore) CreateCrawlInfo(arg0 store.SiteDefID, arg1 string) (store.CrawlInfoID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCrawlInfo", arg0, arg1)
	ret0, _ := ret[0].(store.CrawlInfoID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCrawlInfo indicates an expected call of CreateCrawlInfo.
func (mr *MockStoreMockRecorder) CreateCrawlInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCrawlInfo", reflect.TypeOf((*MockStore)(nil).CreateCrawlInfo), arg0, arg1)
}

// CreateSiteDef mocks base method.
func (m *MockStore) CreateSiteDef(arg0 store.SiteDef) (store.SiteDefID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSiteDef", arg0)
	ret0, _ := ret[0].(store.SiteDefID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSiteDef indicates an expected call of CreateSiteDef.
func (mr *MockStoreMockRecorder) CreateSiteDef(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSiteDef", reflect.TypeOf((*MockStore)(nil).CreateSiteDef), arg0)
}

// CreateSiteUpdate mocks base method.
func (m *MockStore) CreateSiteUpdate(arg0 store.SiteUpdate) (store.SiteUpdateID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSiteUpdate", arg0)
	ret0, _ := ret[0].(store.SiteUpdateID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSiteUpdate indicates an expected call of CreateSiteUpdate.
func (mr *MockStoreMockRecorder) CreateSiteUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSiteUpdate", reflect.TypeOf((*MockStore)(nil).CreateSiteUpdate), arg0)
}

// EndCrawlInfo mocks base method.
func (m *MockStore) EndCrawlInfo(arg0 store.CrawlInfoID, arg1 error, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndCrawlInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndCrawlInfo indicates an expected call of EndCrawlInfo.
func (mr *MockStoreMockRecorder) EndCrawlInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndCrawlInfo", reflect.TypeOf((*MockStore)(nil).EndCrawlInfo), arg0, arg1, arg2)
}

// GetComics mocks base method.
func (m *MockStore) GetComics() ([]store.Comic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComics")
	ret0, _ := ret[0].([]store.Comic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComics indicates an expected call of GetComics.
func (mr *MockStoreMockRecorder) GetComics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComics", reflect.TypeOf((*MockStore)(nil).GetComics))
}

// GetCrawlInfo mocks base method.
func (m *MockStore) GetCrawlInfo(arg0 store.SiteDefID) ([]store.CrawlInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawlInfo", arg0)
	ret0, _ := ret[0].([]store.CrawlInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrawlInfo indicates an expected call of GetCrawlInfo.
func (mr *MockStoreMockRecorder) GetCrawlInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlInfo", reflect.TypeOf((*MockStore)(nil).GetCrawlInfo), arg0)
}

// GetCrawlInfos mocks base method.
func (m *MockStore) GetCrawlInfos() ([]store.CrawlInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawlInfos")
	ret0, _ := ret[0].([]store.CrawlInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrawlInfos indicates an expected call of GetCrawlInfos.
func (mr *MockStoreMockRecorder) GetCrawlInfos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlInfos", reflect.TypeOf((*MockStore)(nil).GetCrawlInfos))
}

// GetLastURL mocks base method.
func (m *MockStore) GetLastURL(arg0 store.SiteDefID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastURL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastURL indicates an expected call of GetLastURL.
func (mr *MockStoreMockRecorder) GetLastURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastURL", reflect.TypeOf((*MockStore)(nil).GetLastURL), arg0)
}

// GetPendingCrawlInfos mocks base method.
func (m *MockStore) GetPendingCrawlInfos() ([]store.CrawlInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingCrawlInfos")
	ret0, _ := ret[0].([]store.CrawlInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingCrawlInfos indicates an expected call of GetPendingCrawlInfos.
func (mr *MockStoreMockRecorder) GetPendingCrawlInfos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingCrawlInfos", reflect.TypeOf((*MockStore)(nil).GetPendingCrawlInfos))
}

// GetSiteDef mocks base method.
func (m *MockStore) GetSiteDef(arg0 store.SiteDefID) (store.SiteDef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteDef", arg0)
	ret0, _ := ret[0].(store.SiteDef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteDef indicates an expected call of GetSiteDef.
func (mr *MockStoreMockRecorder) GetSiteDef(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteDef", reflect.TypeOf((*MockStore)(nil).GetSiteDef), arg0)
}

// GetSiteDefs mocks base method.
func (m *MockStore) GetSiteDefs(arg0 bool) ([]store.SiteDef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteDefs", arg0)
	ret0, _ := ret[0].([]store.SiteDef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteDefs indicates an expected call of GetSiteDefs.
func (mr *MockStoreMockRecorder) GetSiteDefs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteDefs", reflect.TypeOf((*MockStore)(nil).GetSiteDefs), arg0)
}

// GetSiteUpdate mocks base method.
func (m *MockStore) GetSiteUpdate(arg0 store.SiteDefID, arg1 string) (store.SiteUpdate, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteUpdate", arg0, arg1)
	ret0, _ := ret[0].(store.SiteUpdate)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSiteUpdate indicates an expected call of GetSiteUpdate.
func (mr *MockStoreMockRecorder) GetSiteUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteUpdate", reflect.TypeOf((*MockStore)(nil).GetSiteUpdate), arg0, arg1)
}

// GetSiteUpdates mocks base method.
func (m *MockStore) GetSiteUpdates(arg0 store.SiteDefID) ([]store.SiteUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteUpdates", arg0)
	ret0, _ := ret[0].([]store.SiteUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteUpdates indicates an expected call of GetSiteUpdates.
func (mr *MockStoreMockRecorder) GetSiteUpdates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteUpdates", reflect.TypeOf((*MockStore)(nil).GetSiteUpdates), arg0)
}

// Redirect mocks base method.
func (m *MockStore) Redirect(arg0 store.SiteUpdateID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redirect", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Redirect indicates an expected call of Redirect.
func (mr *MockStoreMockRecorder) Redirect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockStore)(nil).Redirect), arg0)
}

// StartCrawlInfo mocks base method.
func (m *MockStore) StartCrawlInfo(arg0 store.CrawlInfoID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCrawlInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCrawlInfo indicates an expected call of StartCrawlInfo.
func (mr *MockStoreMockRecorder) StartCrawlInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCrawlInfo", reflect.TypeOf((*MockStore)(nil).StartCrawlInfo), arg0)
}

// UpdateSiteDef mocks base method.
func (m *MockStore) UpdateSiteDef(arg0 store.SiteDef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSiteDef", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSiteDef indicates an expected call of UpdateSiteDef.
func (mr *MockStoreMockRecorder) UpdateSiteDef(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSiteDef", reflect.TypeOf((*MockStore)(nil).UpdateSiteDef), arg0)
}
