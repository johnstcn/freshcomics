// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	store "github.com/johnstcn/freshcomics/internal/store"
	mock "github.com/stretchr/testify/mock"
)

// SiteDefStore is an autogenerated mock type for the SiteDefStore type
type SiteDefStore struct {
	mock.Mock
}

// CreateSiteDef provides a mock function with given fields: sd
func (_m *SiteDefStore) CreateSiteDef(sd store.SiteDef) (store.SiteDefID, error) {
	ret := _m.Called(sd)

	var r0 store.SiteDefID
	if rf, ok := ret.Get(0).(func(store.SiteDef) store.SiteDefID); ok {
		r0 = rf(sd)
	} else {
		r0 = ret.Get(0).(store.SiteDefID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store.SiteDef) error); ok {
		r1 = rf(sd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastURL provides a mock function with given fields: id
func (_m *SiteDefStore) GetLastURL(id store.SiteDefID) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(store.SiteDefID) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store.SiteDefID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSiteDef provides a mock function with given fields: id
func (_m *SiteDefStore) GetSiteDef(id store.SiteDefID) (store.SiteDef, error) {
	ret := _m.Called(id)

	var r0 store.SiteDef
	if rf, ok := ret.Get(0).(func(store.SiteDefID) store.SiteDef); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(store.SiteDef)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store.SiteDefID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSiteDefs provides a mock function with given fields: includeInactive
func (_m *SiteDefStore) GetSiteDefs(includeInactive bool) ([]store.SiteDef, error) {
	ret := _m.Called(includeInactive)

	var r0 []store.SiteDef
	if rf, ok := ret.Get(0).(func(bool) []store.SiteDef); ok {
		r0 = rf(includeInactive)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.SiteDef)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(includeInactive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSiteDef provides a mock function with given fields: sd
func (_m *SiteDefStore) UpdateSiteDef(sd store.SiteDef) error {
	ret := _m.Called(sd)

	var r0 error
	if rf, ok := ret.Get(0).(func(store.SiteDef) error); ok {
		r0 = rf(sd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
