// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	store "github.com/johnstcn/freshcomics/internal/store"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CreateCrawlInfo provides a mock function with given fields: id, url
func (_m *Store) CreateCrawlInfo(id store.SiteDefID, url string) (store.CrawlInfoID, error) {
	ret := _m.Called(id, url)

	var r0 store.CrawlInfoID
	if rf, ok := ret.Get(0).(func(store.SiteDefID, string) store.CrawlInfoID); ok {
		r0 = rf(id, url)
	} else {
		r0 = ret.Get(0).(store.CrawlInfoID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store.SiteDefID, string) error); ok {
		r1 = rf(id, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSiteDef provides a mock function with given fields: sd
func (_m *Store) CreateSiteDef(sd store.SiteDef) (store.SiteDefID, error) {
	ret := _m.Called(sd)

	var r0 store.SiteDefID
	if rf, ok := ret.Get(0).(func(store.SiteDef) store.SiteDefID); ok {
		r0 = rf(sd)
	} else {
		r0 = ret.Get(0).(store.SiteDefID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store.SiteDef) error); ok {
		r1 = rf(sd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSiteUpdate provides a mock function with given fields: su
func (_m *Store) CreateSiteUpdate(su store.SiteUpdate) (store.SiteUpdateID, error) {
	ret := _m.Called(su)

	var r0 store.SiteUpdateID
	if rf, ok := ret.Get(0).(func(store.SiteUpdate) store.SiteUpdateID); ok {
		r0 = rf(su)
	} else {
		r0 = ret.Get(0).(store.SiteUpdateID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store.SiteUpdate) error); ok {
		r1 = rf(su)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndCrawlInfo provides a mock function with given fields: id, crawlErr, seen
func (_m *Store) EndCrawlInfo(id store.CrawlInfoID, crawlErr error, seen int) error {
	ret := _m.Called(id, crawlErr, seen)

	var r0 error
	if rf, ok := ret.Get(0).(func(store.CrawlInfoID, error, int) error); ok {
		r0 = rf(id, crawlErr, seen)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetComics provides a mock function with given fields:
func (_m *Store) GetComics() ([]store.Comic, error) {
	ret := _m.Called()

	var r0 []store.Comic
	if rf, ok := ret.Get(0).(func() []store.Comic); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.Comic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCrawlInfo provides a mock function with given fields: id
func (_m *Store) GetCrawlInfo(id store.SiteDefID) ([]store.CrawlInfo, error) {
	ret := _m.Called(id)

	var r0 []store.CrawlInfo
	if rf, ok := ret.Get(0).(func(store.SiteDefID) []store.CrawlInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.CrawlInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store.SiteDefID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCrawlInfos provides a mock function with given fields:
func (_m *Store) GetCrawlInfos() ([]store.CrawlInfo, error) {
	ret := _m.Called()

	var r0 []store.CrawlInfo
	if rf, ok := ret.Get(0).(func() []store.CrawlInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.CrawlInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastURL provides a mock function with given fields: id
func (_m *Store) GetLastURL(id store.SiteDefID) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(store.SiteDefID) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store.SiteDefID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingCrawlInfos provides a mock function with given fields:
func (_m *Store) GetPendingCrawlInfos() ([]store.CrawlInfo, error) {
	ret := _m.Called()

	var r0 []store.CrawlInfo
	if rf, ok := ret.Get(0).(func() []store.CrawlInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.CrawlInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSiteDef provides a mock function with given fields: id
func (_m *Store) GetSiteDef(id store.SiteDefID) (store.SiteDef, error) {
	ret := _m.Called(id)

	var r0 store.SiteDef
	if rf, ok := ret.Get(0).(func(store.SiteDefID) store.SiteDef); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(store.SiteDef)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store.SiteDefID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSiteDefs provides a mock function with given fields: includeInactive
func (_m *Store) GetSiteDefs(includeInactive bool) ([]store.SiteDef, error) {
	ret := _m.Called(includeInactive)

	var r0 []store.SiteDef
	if rf, ok := ret.Get(0).(func(bool) []store.SiteDef); ok {
		r0 = rf(includeInactive)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.SiteDef)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(includeInactive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSiteUpdate provides a mock function with given fields: id, ref
func (_m *Store) GetSiteUpdate(id store.SiteDefID, ref string) (store.SiteUpdate, bool, error) {
	ret := _m.Called(id, ref)

	var r0 store.SiteUpdate
	if rf, ok := ret.Get(0).(func(store.SiteDefID, string) store.SiteUpdate); ok {
		r0 = rf(id, ref)
	} else {
		r0 = ret.Get(0).(store.SiteUpdate)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(store.SiteDefID, string) bool); ok {
		r1 = rf(id, ref)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(store.SiteDefID, string) error); ok {
		r2 = rf(id, ref)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSiteUpdates provides a mock function with given fields: id
func (_m *Store) GetSiteUpdates(id store.SiteDefID) ([]store.SiteUpdate, error) {
	ret := _m.Called(id)

	var r0 []store.SiteUpdate
	if rf, ok := ret.Get(0).(func(store.SiteDefID) []store.SiteUpdate); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.SiteUpdate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store.SiteDefID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Redirect provides a mock function with given fields: id
func (_m *Store) Redirect(id store.SiteUpdateID) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(store.SiteUpdateID) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store.SiteUpdateID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartCrawlInfo provides a mock function with given fields: id
func (_m *Store) StartCrawlInfo(id store.CrawlInfoID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(store.CrawlInfoID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSiteDef provides a mock function with given fields: sd
func (_m *Store) UpdateSiteDef(sd store.SiteDef) error {
	ret := _m.Called(sd)

	var r0 error
	if rf, ok := ret.Get(0).(func(store.SiteDef) error); ok {
		r0 = rf(sd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
