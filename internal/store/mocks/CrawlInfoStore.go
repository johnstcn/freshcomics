// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	store "github.com/johnstcn/freshcomics/internal/store"
	mock "github.com/stretchr/testify/mock"
)

// CrawlInfoStore is an autogenerated mock type for the CrawlInfoStore type
type CrawlInfoStore struct {
	mock.Mock
}

// CreateCrawlInfo provides a mock function with given fields: id, url
func (_m *CrawlInfoStore) CreateCrawlInfo(id store.SiteDefID, url string) (store.CrawlInfoID, error) {
	ret := _m.Called(id, url)

	var r0 store.CrawlInfoID
	if rf, ok := ret.Get(0).(func(store.SiteDefID, string) store.CrawlInfoID); ok {
		r0 = rf(id, url)
	} else {
		r0 = ret.Get(0).(store.CrawlInfoID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store.SiteDefID, string) error); ok {
		r1 = rf(id, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndCrawlInfo provides a mock function with given fields: id, crawlErr, seen
func (_m *CrawlInfoStore) EndCrawlInfo(id store.CrawlInfoID, crawlErr error, seen int) error {
	ret := _m.Called(id, crawlErr, seen)

	var r0 error
	if rf, ok := ret.Get(0).(func(store.CrawlInfoID, error, int) error); ok {
		r0 = rf(id, crawlErr, seen)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCrawlInfo provides a mock function with given fields: id
func (_m *CrawlInfoStore) GetCrawlInfo(id store.SiteDefID) ([]store.CrawlInfo, error) {
	ret := _m.Called(id)

	var r0 []store.CrawlInfo
	if rf, ok := ret.Get(0).(func(store.SiteDefID) []store.CrawlInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.CrawlInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store.SiteDefID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCrawlInfos provides a mock function with given fields:
func (_m *CrawlInfoStore) GetCrawlInfos() ([]store.CrawlInfo, error) {
	ret := _m.Called()

	var r0 []store.CrawlInfo
	if rf, ok := ret.Get(0).(func() []store.CrawlInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.CrawlInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingCrawlInfos provides a mock function with given fields:
func (_m *CrawlInfoStore) GetPendingCrawlInfos() ([]store.CrawlInfo, error) {
	ret := _m.Called()

	var r0 []store.CrawlInfo
	if rf, ok := ret.Get(0).(func() []store.CrawlInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.CrawlInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartCrawlInfo provides a mock function with given fields: id
func (_m *CrawlInfoStore) StartCrawlInfo(id store.CrawlInfoID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(store.CrawlInfoID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
