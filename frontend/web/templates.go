// Code generated by go-bindata.
// sources:
// web/templates/frontend_footer.gohtml
// web/templates/frontend_header.gohtml
// web/templates/frontend_index.gohtml
// web/templates/style.css
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _frontend_footerGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x41\x0a\x02\x31\x0c\x40\xd1\x7d\x4f\x11\x7a\x00\xb3\x97\x98\x8d\x07\x91\xce\x34\xa5\x15\x27\x91\x4e\x50\x86\xd2\xbb\xbb\x18\x70\xfb\xe1\xbf\x31\x20\x4b\x69\x2a\x10\x4b\x37\x75\xd1\xfc\x28\x66\x2e\x3d\xc2\x9c\x81\x70\xb1\x7c\x70\xa0\xb3\x71\x20\x4d\x1f\x0e\x94\xa0\x76\x29\xb7\x58\xdd\xdf\xfb\x15\xd1\xbf\xcd\x5d\xfa\x65\xb5\x0d\x9f\x56\x75\xf7\x55\x23\x2f\x07\xdc\x5b\x52\xc2\xc4\x81\xf0\x3c\xf1\x2f\x61\xf5\xed\xc5\x61\x0c\x10\xcd\x30\xe7\x2f\x00\x00\xff\xff\x39\x69\xae\x32\x8b\x00\x00\x00")

func frontend_footerGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_frontend_footerGohtml,
		"frontend_footer.gohtml",
	)
}

func frontend_footerGohtml() (*asset, error) {
	bytes, err := frontend_footerGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend_footer.gohtml", size: 139, mode: os.FileMode(436), modTime: time.Unix(1500549217, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frontend_headerGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x51\xab\xd3\x40\x10\x85\xdf\xfb\x2b\xc6\x15\x7c\x32\x0d\x15\x14\xc1\x6c\x40\xea\x15\x7c\xd2\x07\x05\x7d\x92\xe9\xee\xa4\x3b\xde\xcd\x6e\xdc\x9d\xa4\x96\xd2\xff\x2e\x49\x6e\x34\xf7\xd2\xa7\xe4\x9c\x9d\xf3\xcd\x81\xb9\x5c\xc0\x52\xc3\x81\x40\x35\x29\x06\xa1\x60\x7f\x3a\x42\x4b\x49\xc1\xf5\xba\xa9\x9e\x7d\xf8\xbc\xff\xfa\xe3\xcb\x1d\x38\x69\x7d\xbd\xa9\xc6\x0f\x78\x0c\x47\xad\x28\xa8\xd1\x20\xb4\xf5\x06\x00\xa0\x6a\x49\x10\x8c\xc3\x94\x49\xb4\xea\xa5\x29\xde\xaa\xf5\x93\x13\xe9\x0a\xfa\xdd\xf3\xa0\xd5\xf7\xe2\xdb\xfb\x62\x1f\xdb\x0e\x85\x0f\x9e\x14\x98\x69\xb9\x68\xf5\xe9\x4e\x93\x3d\xd2\xa3\x64\xc0\x96\xb4\x1a\x98\x4e\x5d\x4c\xb2\x1a\x3e\xb1\x15\xa7\x2d\x0d\x6c\xa8\x98\xc4\x4b\xe0\xc0\xc2\xe8\x8b\x6c\xd0\x93\xde\xdd\x00\x59\xca\x26\x71\x27\x1c\xc3\x8a\xf5\x31\x51\x76\xfb\xd8\xb2\xc9\x50\x80\x71\x64\xee\xe1\x1c\xfb\x04\x0d\x0e\xb1\x4f\x2c\x04\x27\x3a\x98\x79\x80\x03\xc4\x40\xd0\x79\x34\xb7\xaa\x62\x2f\x2e\xa6\x15\xfc\xc8\xe2\xfa\xc3\xd6\xc4\xb6\xfc\x15\x5d\xc8\x62\xc2\x12\xf3\x1c\xee\x21\x91\xd7\x8a\xcd\x58\xc8\x25\x6a\xb4\x2a\x1b\x1c\x46\xbd\x65\x13\x97\x49\x61\xf1\x54\xaf\x7a\x56\xe5\x6c\x3d\x05\x65\x39\x7b\xca\x8e\x48\xfe\xe1\x26\x6b\x6b\x72\x56\x65\xbd\xa9\xca\xf9\x6c\xd5\x21\xda\xf3\xc3\x11\x29\x3d\x60\x02\x0e\xf3\xdf\xa4\xdc\xee\xbf\x98\x0c\x5c\x88\xaa\x7e\xf1\xfc\xcf\xab\x37\xbb\xd7\xef\xe0\x51\x25\x5c\xa5\xcb\x25\x5e\x95\x13\x76\x5e\x3c\xae\xba\x5c\x80\x82\x85\xeb\xf5\x6f\x00\x00\x00\xff\xff\x39\x1a\xe6\x3a\x82\x02\x00\x00")

func frontend_headerGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_frontend_headerGohtml,
		"frontend_header.gohtml",
	)
}

func frontend_headerGohtml() (*asset, error) {
	bytes, err := frontend_headerGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend_header.gohtml", size: 642, mode: os.FileMode(436), modTime: time.Unix(1500550115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _frontend_indexGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x4d\x6a\xc3\x30\x10\x85\xf7\x3d\xc5\xa0\x03\xd8\xfb\x62\x1b\x4a\x43\xa1\x9b\x6c\x52\xe8\x32\xa8\xf6\x28\x19\x2a\x8d\x83\x34\x6a\x0a\xaa\xee\x5e\x24\xb7\x4e\x02\xd9\xd9\xdf\xfb\x91\xf4\x52\x82\x09\x0d\x31\x82\x32\x7e\x66\x41\x9e\xf6\xc4\x13\x7e\x2b\xc8\xf9\x01\x00\x20\x25\x10\x74\x27\xab\xe5\xda\x73\x44\x3d\xa1\x5f\x4d\x9d\xf6\x42\xa3\xc5\xa1\xfe\x55\x12\x2d\xd0\xd4\xab\x71\x76\x34\xee\x2d\x05\x51\x17\x31\x25\xf0\x9a\x0f\x08\xcd\x73\x91\xc3\x7f\xcd\x1a\xb6\x34\xdc\x80\xe5\x0c\x10\xed\x0f\x28\xbd\xda\x7f\x58\xcd\x9f\x0a\x8e\x1e\x4d\xaf\xda\x2f\xc2\x73\x9b\x12\x34\xaf\x1b\xc8\x59\x0d\xe5\x73\xab\x1d\x42\xce\x8f\xd0\xa1\xab\xe0\x8d\xc4\x16\xd2\xb5\x0b\x20\x03\xcd\x76\xf7\xf2\x5e\x50\x88\x27\x18\xad\x0e\xa1\x57\x1c\xcc\x59\x0d\x45\xe8\xda\x10\x4f\xc5\x89\x3c\xd5\x9c\xbe\x73\x27\x21\x87\x43\x40\xe4\xf2\xa6\x66\x87\xc8\x4f\x02\x3f\x70\x8c\x4e\xf3\x26\x7a\x2d\x34\x73\x0d\x57\xe3\xf5\x00\x4b\xeb\x65\xaf\x36\xda\x45\xef\xda\x9b\x31\xef\xef\x6f\xe6\x59\xfe\xf6\x5f\xbb\x7e\x03\x00\x00\xff\xff\xc8\x34\x4b\x3f\xcc\x01\x00\x00")

func frontend_indexGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_frontend_indexGohtml,
		"frontend_index.gohtml",
	)
}

func frontend_indexGohtml() (*asset, error) {
	bytes, err := frontend_indexGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend_index.gohtml", size: 460, mode: os.FileMode(436), modTime: time.Unix(1500630007, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _styleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x61\x8b\xdb\x30\x0c\xfd\xde\x5f\x61\x28\x07\xbb\x81\x47\x0e\xb6\xdb\xf0\xfd\x98\xe1\xc4\x72\x22\xce\xb1\x8c\xad\x76\xcd\xc6\xfd\xf7\x11\xdb\x49\x93\xdb\x95\xc2\xf4\xa9\xd1\x7b\xd2\x7b\x96\xd4\xcf\xe2\xcf\x41\x08\x31\xea\xd8\xa3\x57\xa2\x09\x97\x97\xf9\x3b\x68\x63\xd0\xf7\x35\xf1\x76\x18\x78\x74\x85\x29\xa4\x1c\x35\x7a\xd9\xf6\xb2\x23\x47\x51\x89\x63\x93\xe3\x65\x8b\xda\x2b\x6a\x73\x2c\xa8\x76\xbc\x2d\xfd\x9a\x63\x0b\x6e\x2a\x7f\xe4\x58\x40\x18\xc3\xb0\x42\x5d\x8e\xd9\x59\x4b\x66\xaa\xce\x5a\xdd\xbd\xf6\x91\x4e\xde\x2c\xbc\xb3\x8e\x9f\xde\xf9\x7d\x2c\xfd\xfe\x25\xd8\x3d\xc1\x92\x67\x69\xf5\x88\x6e\x52\x22\x69\x9f\x64\x82\x88\x76\x96\xf4\xfa\x7c\x47\x71\xfb\x90\xda\xaf\xa5\x68\x20\xca\x96\x98\x69\x54\xe2\x29\x5c\x44\x22\x87\xa6\x56\x5c\x5f\xf7\x38\x4b\xe8\x2a\x70\xd7\xa6\xc1\x14\x9c\x9e\x94\x68\x1d\x75\xaf\x25\xc7\x70\x61\x69\xa0\xa3\xa8\x19\xc9\x2b\xe1\xc9\xc3\xdc\xf5\xd8\xd1\x88\xdd\x4f\x87\x89\x6b\xff\xf9\xa7\x4c\x3c\x39\x90\x3c\x05\x58\xa8\x33\xf4\x0b\x0d\x0f\x4a\x3c\x3f\x3f\x94\xef\x72\x22\xd2\x81\x65\x25\xf4\x89\x69\x97\x8e\xd8\x0f\x6b\x7e\xaf\xe4\xf0\x7f\xa7\x75\x67\x4c\x1b\x79\xa6\xa0\x44\xf3\xe5\x1b\x8c\x25\x7d\xbd\xdf\x92\xdb\x3b\x62\x1c\xa1\x7a\xca\x6b\x4e\xf8\x1b\x66\xea\xf7\xca\xdd\x91\x97\x55\xac\x93\xce\x33\x43\x5e\xa4\x6e\x8c\xf0\x5d\x97\x74\x0a\x1f\x29\xae\x86\xcf\x10\x19\x3b\xed\xa4\x76\xd8\x7b\x25\x98\xc2\xee\x50\x8f\xd6\x96\x3f\xd9\xdb\xe1\x30\x80\x36\x10\x6b\xbb\xbc\xec\x5a\xd4\x81\x67\x88\x99\x63\x89\x78\xe5\x7c\xf0\xc8\x5b\xa5\x79\x78\x94\xb0\x1c\x8e\xc5\x0b\x98\xdd\x39\x3c\x35\xcd\xc3\xb2\xa2\x72\xc9\xd9\xd3\xdf\x00\x00\x00\xff\xff\x0e\xc1\x8c\xb1\x47\x04\x00\x00")

func styleCssBytes() ([]byte, error) {
	return bindataRead(
		_styleCss,
		"style.css",
	)
}

func styleCss() (*asset, error) {
	bytes, err := styleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "style.css", size: 1095, mode: os.FileMode(436), modTime: time.Unix(1500630103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"frontend_footer.gohtml": frontend_footerGohtml,
	"frontend_header.gohtml": frontend_headerGohtml,
	"frontend_index.gohtml": frontend_indexGohtml,
	"style.css": styleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"frontend_footer.gohtml": &bintree{frontend_footerGohtml, map[string]*bintree{}},
	"frontend_header.gohtml": &bintree{frontend_headerGohtml, map[string]*bintree{}},
	"frontend_index.gohtml": &bintree{frontend_indexGohtml, map[string]*bintree{}},
	"style.css": &bintree{styleCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

