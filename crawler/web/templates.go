// Code generated by go-bindata.
// sources:
// web/templates/admin_details.gohtml
// web/templates/admin_footer.gohtml
// web/templates/admin_header.gohtml
// web/templates/admin_index.gohtml
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _admin_detailsGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5b\x6f\xe3\x36\x16\x7e\xf7\xaf\x38\xe5\x2e\x0a\x7b\xbb\x96\x92\x41\xbb\x0f\x8e\xad\xc5\x60\xd2\x41\x5b\x64\xa6\x81\x9d\x6c\x0b\x0c\x06\x03\xda\x3a\xb2\xd9\xa1\x29\x81\xa4\x92\xb8\x5e\xff\xf7\x05\x2f\xba\x46\x4e\x26\x45\xdc\xb8\x9b\x07\x47\x24\xcf\xf5\xe3\x27\x1e\x4a\xd4\x76\x0b\x31\x26\x4c\x20\x10\x1a\xaf\x99\xf8\x14\xa3\xa6\x8c\x2b\x02\xbb\x5d\x6f\xbb\x05\x8d\xeb\x8c\x53\x5d\x0e\xaf\x90\xc6\x28\xed\xe8\x38\x66\x37\xb0\xe0\x54\xa9\x09\x59\xa4\x42\x53\x26\x50\x0e\x13\x9e\xb3\x98\x44\x3d\x00\x80\xf1\xea\x34\xda\x6e\x21\x98\x31\x8d\xe7\x98\x04\xef\xe9\x1a\x61\xb7\x1b\x87\xab\xd3\x42\x40\x86\xee\x6a\xbb\x05\x96\x80\x40\x08\xde\xa1\x52\x74\x89\x40\xac\x13\xf0\x7f\x6e\x3c\x98\xe5\x8b\x05\x2a\x55\x1f\xb1\x76\x6a\xa1\x50\x8e\x52\x83\xfd\x1d\x2a\x27\x4e\x6c\x14\x85\x61\x13\x40\xcc\x6e\xa2\xba\x6d\xe4\x0a\xbf\xd4\x68\x4c\xc5\x12\xe5\x17\xd8\x14\x71\x61\xb2\xd9\xaa\x1b\x96\xe9\x2d\xa9\xb4\x9a\x90\xf2\xa1\x5a\x0f\x4f\x5f\xd5\xc6\x9d\x8c\x9b\xa1\x56\xaf\xca\xd7\x6b\x2a\x37\xa0\xf4\x86\xe3\x84\x24\xa9\xd0\x43\xc5\x7e\xc7\x11\xbc\xc2\xf5\x19\x89\xbe\xbf\x41\xa1\xd5\x38\xf4\x72\x2d\x6d\x4d\xe7\x1c\x0b\xcf\xae\x61\x7f\x87\x4a\x4b\x96\x61\xec\x5b\xab\xf4\xc6\x64\xde\xd0\xf5\xf9\x49\x83\x0a\x04\xce\x4d\x1b\xca\xca\x8f\x8c\xc6\x3a\xb6\xd0\xbd\x91\x48\x35\xc6\xf0\x5f\x88\xa9\x46\xcd\x3c\x35\x74\x5c\x4a\x58\x5b\x57\x9b\xac\x3e\xd0\xc8\x2f\xa1\x6b\xc6\x37\x23\x58\xa7\x22\x55\x19\x5d\xe0\x19\xa9\x14\x7f\x14\x49\x5a\x2a\x86\x5a\xde\x8f\xfa\xfe\xcc\x34\x62\x0d\x6d\xce\xf7\xd5\xc6\x14\x34\x95\x4b\xd4\x13\xf2\x69\xce\xa9\xf8\x4c\x60\x25\x31\x99\x90\x50\x31\x8d\x31\x26\x61\x9d\xf3\x3f\x9e\xc3\x6e\x17\xa2\x85\x85\x44\xff\x61\x78\x0b\xaf\x39\x1f\x87\xb4\x35\x03\xe1\xbd\x69\xad\x31\xaa\x7e\xb9\x92\xe0\xef\x99\x43\xf0\xe8\x8b\xb8\x74\x9d\x99\x29\xdb\x47\x26\x78\x06\x42\x41\x83\x54\xde\xdf\x3e\x56\x41\x8b\x59\x97\xf9\x9c\x33\xb5\x7a\x90\x5b\x57\x4c\xf3\x27\xf1\x6a\xef\xac\x1b\x6b\xd7\xd3\x0b\xd8\xed\x1c\xf9\xdc\xb5\x99\xe0\xe3\xa0\x5e\xee\xc0\xfb\x7f\xe1\xde\xb9\xa9\x56\x4c\xb3\x54\x3c\x44\xbf\x5a\x0c\x19\x15\xc8\x87\xf3\x34\xde\xec\xe1\xd9\x38\x49\xe5\x1a\xd6\xa8\x57\x69\x3c\x21\x97\x3f\xcf\xae\x08\xb0\x78\x42\x3c\xa4\x9f\xcc\x30\x01\xba\x30\x3e\x1f\x42\x7a\x8f\xf9\x76\x3c\xc6\xdc\x70\x29\xd3\x3c\x7b\x40\xc1\x2a\x71\x3a\x47\x5e\xaf\xb0\x32\xe5\x43\xdb\x49\x20\x49\x65\x15\xa1\xa0\x6b\x24\x91\xa9\xae\xa3\x71\x68\x05\x1e\xb1\xcc\x44\x96\xeb\x46\x40\xde\x3c\x01\xbd\xc9\x70\x42\x34\xde\xe9\x26\x0a\xd6\x07\x98\xdf\x09\x71\xd7\x37\x94\xe7\xe8\xf8\xdf\x2a\xf0\x0f\x21\xd1\x2c\x93\x7f\x36\x50\x2a\xb9\x25\xd1\xfb\xd9\xdb\x5f\xfe\xfd\x4c\x40\x2d\x56\xb8\xf8\x3c\x4f\xef\x5a\x60\x19\x3f\x05\x58\xf6\xda\x83\xa5\x65\x8e\xa4\xdc\xcc\x14\xa8\xcd\xde\xfe\x02\xbb\x1d\x58\x5b\x18\x57\x0b\xc3\x73\xa5\x6d\xb8\x7b\x83\x24\x7a\x6d\xff\x1f\x36\x75\xef\xcb\x27\x5f\xb4\x1e\x4a\xdf\x45\xf5\x44\x00\x5e\x96\x47\x4a\x53\xa9\x73\xc9\x49\x34\x33\x57\x70\x3d\xbd\x78\xae\x3b\xcf\x58\x6d\x00\x5a\xfa\xf2\x90\x56\xed\x8e\x1b\xd0\x86\x53\x54\xa3\x23\x05\x8f\x53\xa5\xfd\x4c\x93\xe8\x82\x2a\x0d\x6f\x5c\xeb\xb9\x20\x2c\x6a\x7e\x13\xc7\xba\x5b\x0f\x65\xa3\xab\x03\x4d\x13\x9c\x8f\xad\xb9\x95\x38\x5a\x6c\x73\xc9\x8b\x27\x36\x12\x19\x1e\x5c\xf9\xd6\xe1\x0a\x43\xdd\xa5\xc7\xb5\xd1\xd5\x81\xeb\xf5\xf4\xa2\x88\xeb\x98\xc1\x94\x98\xdc\x65\x54\xaf\x48\x34\xc5\x04\x7e\xbd\xa4\x7a\x75\x38\x18\x4b\x67\x1e\xc3\xaa\xdd\x01\xe0\x14\x93\x5f\xcd\xe0\x91\xa3\x27\x71\x89\x77\x99\x83\x6f\x6a\xaf\x0f\x8a\x9f\x77\x57\x01\x58\x74\x74\x23\xe8\x22\x3a\x66\x08\xb5\x79\x48\xf1\x14\x74\x0f\x2c\x07\x26\x61\xcd\xa1\x47\xb1\xde\xd3\x01\xa3\x8d\xea\xe8\xa9\x68\x93\x28\xc8\xe8\x80\x3c\x34\x1d\xeb\x2e\xeb\x50\x3e\x40\x49\x1b\xd8\xf1\x93\xd2\x94\x41\xcf\xc9\x73\xb3\x80\x1f\x98\x92\x95\x3b\x0f\x63\xad\xa3\x03\x44\x13\x92\xe5\xe3\x11\x23\x58\x5b\x19\x2d\x82\x87\xe6\xa2\x41\xac\x49\xc5\x7a\xcf\x1e\x10\xff\x1a\x44\x34\x66\xa9\xf6\x38\xbe\xb5\x0d\xe8\xbf\x4b\x05\xfc\x44\x05\xbc\x82\xd3\xef\x46\x27\xdf\x8e\x4e\xbe\x83\x77\xb3\x2b\x78\x75\x72\xf2\xaf\xc1\x61\x51\xf6\xe1\xd4\x50\x2e\x7a\xf6\xa0\xec\x43\xfe\xf3\x51\x6e\x24\x38\xd7\x02\xe6\x5a\x0c\xe7\x3c\x5d\x7c\xb6\x57\x99\x64\x6b\x2a\x37\x45\xb6\x2a\x9f\xaf\x59\x95\xc5\xcc\x35\xff\x50\xc8\xe3\xd0\x04\xd9\xf1\xca\xe6\xbe\xca\x5f\xea\xbd\xd4\x15\x2a\x0d\x53\x54\x39\xdf\xfb\x96\xbd\x1d\x45\xc7\xa1\x82\x65\x94\x46\xa5\x3f\xa1\x94\xa9\x24\x85\xbb\x98\xa9\x8c\xd3\xcd\x48\xa4\xc2\xbe\x8c\xec\xc6\xf7\x49\x54\x78\xfc\x46\xb3\x71\x48\x4c\xec\x06\xee\xe1\x1b\xe7\x29\x37\x4c\x65\xf6\x4b\x48\x70\xa8\xbc\xec\xd3\xfb\xa3\xcf\xed\x4f\xce\xcb\x9a\x7d\xc9\xbc\xec\x2e\xc3\xef\x72\x9e\x39\x37\x6f\xfa\x25\xb3\x8b\xed\x83\xed\xf9\xa3\x0f\xb4\x4f\xce\xcd\x19\x7e\xc9\xd4\x04\xde\xe9\x8c\x2e\x91\x44\xef\xf1\x4e\xc3\x25\x5d\xe2\xe3\xef\x95\x9e\x9c\x67\xe5\xe5\x30\xb9\xce\x73\xad\x53\x51\xf9\x73\x6d\xf2\x78\xa5\xb1\x0b\xe8\x38\x74\xf2\xc7\x51\x1e\xbe\xbd\xb7\xd0\x76\x0b\xf5\xfe\x10\x5c\x75\xa8\x16\x92\xde\xf2\x27\x60\xf5\x36\x95\x0b\x84\x37\x46\xab\x1b\xb2\x76\xdc\x6d\x5c\xc6\x5f\x0d\x87\x10\x84\x32\xbd\x85\xe1\x30\xea\xd5\x3a\xc3\xa0\x3c\xcb\x77\x43\x6a\x21\x59\xa6\x6b\x6c\x0a\x7f\xa3\x37\xd4\xf5\x92\xa8\x97\xe4\xc2\x9e\x8c\x80\x42\xc9\x28\x67\xbf\xdb\x3d\x4d\x7f\x00\x5b\xeb\x2e\x81\x09\xfc\xbd\x4f\xfe\xd6\x38\x4c\x19\x04\xa5\xf0\x6b\x29\xe9\xa6\x3f\xb0\xb2\x29\x4c\x60\xeb\x4e\xc3\x92\x54\x42\x9f\x4d\x4e\xce\x80\xc1\x18\x92\x80\xa3\x58\xea\xd5\x19\xb0\x6f\xbe\x29\x2c\x5b\x8d\x0f\xc9\x07\xf6\xf1\x83\x3b\x90\xf8\xf8\x11\x26\xe0\xda\x76\x9f\x42\x3e\x9e\x59\x41\x67\x51\xa2\xce\xa5\x80\xb4\xb7\xeb\xd5\x62\x5e\xa5\xb7\x3f\xb0\x18\xbf\x37\xc5\xb6\x2f\x6d\xf5\x2e\xec\xa3\x94\x3e\xf6\x5a\x3d\x1e\x38\x93\x2c\x01\x2f\x1d\x58\x55\xf8\x6a\x32\x01\x42\xea\xa1\xa1\x94\x81\x41\xab\x21\xe7\xd5\x8b\x71\xe3\xbe\xef\xfb\x76\xee\x1b\x84\xa6\x81\x15\x8b\xb1\x14\x68\x44\xae\xd9\x1a\x95\xa6\xeb\xec\x2a\xbd\xbe\x7a\x33\xd3\x92\x89\x65\x5f\xab\x22\x02\x9f\xad\xc0\x5b\x30\x8b\x65\x5f\x2b\xf8\x07\x9c\x9e\x9c\x9c\x0c\x02\x5d\x53\x18\x9c\x35\x8c\x32\x75\x29\x51\xa1\xd0\x7d\xbd\x62\x62\xd9\x32\xe6\x3a\x6d\xaa\xb9\x70\x1f\x8d\xc4\xf0\xf5\xd7\x50\x75\x8b\x9c\xf3\x96\xc9\x5b\xc9\x34\x9a\x5b\xdb\x6d\x8d\x5a\x18\x77\xe2\x5f\x41\x5c\xc5\xe3\x41\x74\x46\x06\x75\x9c\xcb\x09\x32\x3b\x8a\x41\x70\x43\x79\x53\x38\x98\x62\x52\x83\xbd\x14\x37\x85\xba\x4b\xfc\x7a\x7a\xd1\x25\xee\x6a\x5f\x97\x82\xad\xb4\x5d\x2a\xb6\xa4\x74\x69\x94\xe7\xd3\x5d\x5a\xe5\x02\xdd\xd0\x34\x25\xa1\x8a\xac\x49\x85\x39\x13\xb1\x41\xf8\x07\x2a\x62\x8e\xb2\xbc\xf5\x4a\x93\x7e\x5d\x19\x04\x0b\xce\x16\x9f\xfb\x85\x62\xbf\x01\x63\x40\x7f\xa3\x77\xfd\x6d\x63\x15\x71\x67\xa2\x23\x70\x87\xa2\xff\x6c\x8c\xe5\x92\x8f\xa0\x3a\x0d\x35\x8e\x5a\x12\x31\xd5\x74\xd4\x5e\x16\x4a\x89\xdd\x20\x88\x53\x81\x55\x34\x4d\x66\x14\x7f\x6d\xfe\xfc\x34\xfb\xf9\x7d\x90\x51\xa9\xb0\x50\xa8\x81\xb8\x2b\xf0\x69\x91\xd0\x20\x64\x97\x4c\xbb\x62\x76\xe1\xd4\x58\x80\x0f\x0a\x94\xf5\xd4\x89\x14\x61\xf1\xe4\xfe\xa1\xf2\x7e\xc0\xda\x50\xf1\x74\x41\xcd\x40\x20\x91\xa7\x34\xee\xef\x07\xe6\x1e\x63\xce\x7a\x7b\x20\x3a\xeb\x8d\x43\xb7\xd4\x47\x5d\x5f\x83\x25\x69\xaa\xfd\xd7\x60\xe5\x99\xdd\xff\x02\x00\x00\xff\xff\xd4\x2b\x4b\xde\x52\x26\x00\x00")

func admin_detailsGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_admin_detailsGohtml,
		"admin_details.gohtml",
	)
}

func admin_detailsGohtml() (*asset, error) {
	bytes, err := admin_detailsGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "admin_details.gohtml", size: 9810, mode: os.FileMode(436), modTime: time.Unix(1500561896, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _admin_footerGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x4c\xc9\xcd\xcc\x8b\x4f\xcb\xcf\x2f\x49\x2d\x52\x52\xa8\xad\xe5\xb2\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x51\xa8\xad\x05\x04\x00\x00\xff\xff\x63\x72\x54\xe0\x35\x00\x00\x00")

func admin_footerGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_admin_footerGohtml,
		"admin_footer.gohtml",
	)
}

func admin_footerGohtml() (*asset, error) {
	bytes, err := admin_footerGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "admin_footer.gohtml", size: 53, mode: os.FileMode(436), modTime: time.Unix(1499954457, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _admin_headerGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x6f\x53\xdb\xc6\x13\x7e\xcf\xa7\xd8\xdc\xef\x45\x7e\xa5\x95\x14\x30\xad\x29\xb1\x3c\x43\x0c\x01\x92\x26\x10\x30\xa4\x74\x3a\xd3\x59\xdf\xad\xa4\x33\xd2\x9d\xb8\x3b\xc9\x56\x1d\xbe\x7b\xe7\x2c\x0b\x63\x42\x67\xfa\x4a\xde\xff\xcf\xb3\xcf\x79\x17\x0b\x10\x94\x48\x45\xc0\x50\x14\x52\xfd\x95\x11\x0a\x32\x0c\x1e\x1e\xb6\x06\xaf\x8e\xce\x47\xe3\xdb\x8b\x63\xc8\x5c\x91\x0f\xb7\x06\xfe\x03\x39\xaa\x34\x66\xa4\xd8\x70\x0b\x60\xe0\xd3\xfd\x0f\x80\x41\x41\x0e\x81\x67\x68\x2c\xb9\x98\x55\x2e\x09\xf6\xd9\xd3\x50\xe6\x5c\x19\xd0\x7d\x25\xeb\x98\xfd\x1e\x5c\x1f\x06\x23\x5d\x94\xe8\xe4\x24\x27\x06\x5c\x2b\x47\xca\xc5\xec\xec\x38\x26\x91\xd2\x46\xa5\xc2\x82\x62\x56\x4b\x9a\x95\xda\xb8\x27\xc9\x33\x29\x5c\x16\x0b\xaa\x25\xa7\x60\x69\xfc\x04\x52\x49\x27\x31\x0f\x2c\xc7\x9c\xe2\x9d\xae\xd1\xab\x20\x80\x71\x46\x80\x13\x5d\x13\xf4\x60\xd9\xd8\x61\x6a\x61\xbb\xa8\xac\xdb\x06\xae\x0b\x82\x44\x1a\xeb\x40\x2a\x70\x19\x81\xe7\xf6\x16\x50\x35\xa0\x5d\x46\x66\x69\x77\xb3\xc1\x17\xb5\x35\xdb\x98\x38\x32\xdb\xbe\xc4\x52\xdb\x32\x08\xbe\x87\x2f\xc8\x72\x23\x4b\x27\xb5\x7a\xc2\xe0\x05\x9e\x58\xb9\x4c\x9b\x17\x72\x72\xa9\xee\xc0\x50\x1e\x33\xc9\x7d\x93\xcc\x50\x12\xb3\x30\x8c\xc2\x30\x4a\xb0\xf6\xce\x50\x72\xdd\xa5\x3b\xe9\x72\x1a\xbe\x37\x64\xb3\x91\x2e\x24\xb7\x30\x32\x38\xcb\xc9\x0c\xa2\x36\xb4\x5e\xcc\x3b\xad\x9d\x75\x06\x4b\xe0\xda\x10\x8c\xae\xae\xd6\x14\xd6\x53\xad\x6b\x72\xb2\x19\x91\xeb\x66\x7b\x49\xed\x41\x14\x15\x38\xe7\x42\x85\x93\xae\x8d\x37\xb8\x2e\xa2\x47\x47\xd4\x0b\x7b\x61\x3f\xe2\xd6\xae\x7d\x61\x21\x55\xc8\xad\x65\x20\x95\xa3\xd4\x48\xd7\xc4\xcc\x66\xd8\xdb\xdf\x0b\xde\xdd\xdc\x4a\x79\x75\xf6\x9e\x3e\xee\x88\x93\xe2\xc3\xe5\xe1\x5d\xc3\xab\xd3\xc3\xd3\xcb\xb4\xb7\x7b\x5e\x5c\xf3\xd9\xac\xaf\x55\xef\xf2\x56\xa4\x7b\x37\xf8\xe3\x45\x71\x35\xb6\x7f\x47\x1f\x7f\xd9\xaf\x27\xe2\x78\x9a\xed\x55\x0c\xb8\xd1\xd6\x6a\x23\x53\xa9\x62\x86\x4a\xab\xa6\xd0\x95\xed\x76\xd3\x4a\x01\xd6\xf0\x35\x09\x9c\xe2\x3c\x4c\xb5\x4e\x73\xc2\x52\xda\x25\x01\xef\x8b\x72\x39\xb1\xd1\xf4\xbe\x22\xd3\x44\x3b\xe1\xce\x6e\xb8\xb7\xb2\x96\x0c\xa6\x96\x0d\x07\x51\xdb\x70\xa3\xfb\x70\x26\x95\xd0\xb3\x70\xfa\xc5\xe7\xc2\xb7\x6f\x20\x34\xaf\x0a\x52\x2e\x9c\x19\xe9\xe8\xff\xaf\x37\x60\xb4\x3a\xa2\xb5\xe4\x6c\x34\xb5\x51\x4d\x4a\x68\xf3\xdd\xa4\x3f\xbb\x51\xaf\x7f\x78\x71\xea\x26\xa7\xff\x2a\xcc\xf4\xb9\x2e\xd3\x17\x65\x19\xf3\x9f\xcf\xbe\xc8\xc9\x9b\xdd\xfe\x7d\xdd\x4c\xaf\x3e\x25\xa7\xd3\xf3\x4f\xf8\xdb\x5d\x52\x7d\xbd\x99\xff\x31\xbf\xbe\x50\xa3\x0f\x87\xfd\x7c\xb7\x18\x7d\xfd\x7c\x56\x9e\xfc\x5a\x9c\x8c\x8e\xf6\x67\x27\x9f\xcf\xf8\xc5\x51\x7f\x3c\xc7\x7f\x97\xe5\x39\x17\xff\xd4\xc0\x35\x25\xc5\xcc\xd1\xdc\xf9\x97\xb3\xd2\x6e\xa2\x45\x03\x0b\x28\x51\x08\xa9\xd2\xc0\xe9\xf2\x00\xfa\x6f\xca\xf9\x5b\x78\x58\xc6\xa5\x2a\x2b\x07\x0b\x48\xb4\x72\x41\x82\x85\xcc\x9b\x03\x28\xb4\xd2\xb6\x44\x4e\x5d\xd6\x20\x5a\x8e\x58\xde\xb0\xa8\x3b\x62\x03\xdf\x7b\x85\x40\x61\x0d\x3c\x47\x6b\x63\xa6\xb0\x9e\xa0\x81\xf6\x13\x48\x55\x93\xb1\xd4\x99\x89\x9c\x93\xf0\x28\x56\xf0\x00\x06\x42\x3e\x96\xfa\xff\x30\x4a\x45\xe6\x31\xba\x19\x5f\x35\x59\x1d\xdd\x75\x8e\xc7\x52\x39\xa7\xd5\x6a\x07\xad\xc1\x9e\x95\x39\x9d\xa6\x39\x01\xd7\x79\x8e\xa5\x25\xc1\x40\xa0\xc3\x95\xdb\x0f\x6f\xfd\x9d\x1b\x4d\xea\x2f\xf3\xff\xda\x6a\x06\x68\x24\x06\x34\x2f\x51\x09\x12\x31\x4b\x30\xf7\xb9\x4b\xaf\xc7\x6d\x74\xfe\x38\x6a\x03\x9a\xd7\xa7\x44\xd5\x81\xb1\x26\xd0\x2a\x6f\xd8\x70\xdc\xc2\x51\x58\xcb\x14\xfd\x9d\x1b\x44\x3e\x6f\x83\x55\xd4\x32\xd9\xf0\xe1\x33\x5a\x13\x83\x4a\x74\x27\x26\x62\x2f\x9f\x30\x7c\xb2\xd0\x48\xc8\xfa\x71\xfb\x6b\x63\x10\x29\xac\x87\x5b\x8b\x05\x90\x12\xf0\xf0\xf0\x4f\x00\x00\x00\xff\xff\x83\xf4\x8a\x59\xec\x06\x00\x00")

func admin_headerGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_admin_headerGohtml,
		"admin_header.gohtml",
	)
}

func admin_headerGohtml() (*asset, error) {
	bytes, err := admin_headerGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "admin_header.gohtml", size: 1772, mode: os.FileMode(436), modTime: time.Unix(1499954457, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _admin_indexGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x3d\x6f\xdb\x30\x10\xdd\xfb\x2b\xae\xb7\xd3\x5a\x3a\x74\x90\xbc\x34\x4b\x97\xb4\x40\xba\x17\xb4\x79\xb2\x0e\x20\x8f\x2a\x75\x72\x12\x08\xfa\xef\x05\x15\xc7\x70\x64\x36\x46\xb3\x08\x27\xbe\x77\xdf\x8f\x9c\x26\x70\xd4\xb2\x10\xa0\x75\x81\xe5\x37\x8b\xa3\x27\x84\x79\xfe\x34\x4d\xa0\x14\x7a\x6f\xf5\x0c\x76\x64\x1d\xa5\x05\x05\x00\xa8\x1d\x1f\x61\xef\xed\x30\x34\xb8\x8f\xa2\x96\x85\x12\x6e\x17\x6c\x8d\xf7\x56\xc8\xc3\xf2\x35\x7d\xe2\x60\xd3\xf3\x05\xb3\xc8\x36\x39\x1d\xcb\x01\xb7\xdf\x12\xe5\x2a\xee\xe9\x11\x1e\x58\xe9\x8e\xda\xba\x72\x7c\xbc\xe5\xbf\x8b\x6e\x9d\x64\x4d\x4c\xf1\xb1\xc0\x58\x58\x6d\x4c\xe1\x95\x96\x6d\xc3\xe2\x59\x08\x21\x90\x76\xd1\x35\xf8\xf3\xc7\xc3\x2f\x04\xbb\x57\x8e\xd2\x60\x35\xb0\x92\xa3\xb6\x12\xfa\x57\xc8\xeb\x99\x79\x33\x04\xf3\xf5\x1d\xfa\xe2\xc2\xd2\x8f\xba\x76\x82\xe5\xd4\x0c\x01\x21\xd1\x9f\x91\x13\x39\xd0\xe7\x9e\x1a\x54\x7a\x52\x04\xb1\x81\x1a\xcc\x5f\x84\xde\xdb\x3d\x75\xd1\x3b\x4a\x0d\x9e\x26\x08\xf7\x19\x7a\xa7\xd0\xeb\x09\xdf\xe8\xe3\xcb\x7f\xf5\xb1\x53\x81\x9d\xca\x59\x0c\xa7\xe2\x87\x71\x17\x58\x11\x8e\xd6\x8f\xd4\xe0\xcb\xe6\x3f\x56\x66\x5d\xe5\xb5\x15\xf6\x5f\xd0\xce\xdb\xa3\xf5\x6f\x97\xaa\xb2\xaa\xaf\xe5\x73\x89\x7a\x1e\xd4\x1c\x52\x1c\xfb\x42\x03\xd3\x04\xc9\xca\x81\x60\xf3\x7a\x9d\xde\x84\xb1\xd7\x41\x0c\x2b\x05\x84\x2e\x51\x7b\x21\xb7\x69\x82\xcd\xf7\x3b\x98\x67\xdc\x66\x33\x6f\x15\xe6\xb9\xae\x6c\x31\x25\x89\x5b\xa7\xab\xab\xd1\x17\x5b\x7f\x31\xeb\xcf\xc6\x40\xb5\x39\xdf\x6f\x30\x66\x5b\x7a\x1b\xda\x18\xf5\xf4\x36\x9c\xf3\xfc\x0d\x00\x00\xff\xff\x49\x58\xeb\x43\x5e\x04\x00\x00")

func admin_indexGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_admin_indexGohtml,
		"admin_index.gohtml",
	)
}

func admin_indexGohtml() (*asset, error) {
	bytes, err := admin_indexGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "admin_index.gohtml", size: 1118, mode: os.FileMode(436), modTime: time.Unix(1500537198, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"admin_details.gohtml": admin_detailsGohtml,
	"admin_footer.gohtml": admin_footerGohtml,
	"admin_header.gohtml": admin_headerGohtml,
	"admin_index.gohtml": admin_indexGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"admin_details.gohtml": &bintree{admin_detailsGohtml, map[string]*bintree{}},
	"admin_footer.gohtml": &bintree{admin_footerGohtml, map[string]*bintree{}},
	"admin_header.gohtml": &bintree{admin_headerGohtml, map[string]*bintree{}},
	"admin_index.gohtml": &bintree{admin_indexGohtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

